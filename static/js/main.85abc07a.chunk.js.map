{"version":3,"sources":["app/logo.svg","services/http-service.js","product/product.js","app/App.js","serviceWorker.js","index.js"],"names":["module","exports","HttpService","getProducts","Promise","resolve","reject","fetch","then","response","json","catch","err","Product","className","src","this","props","imgUrl","alt","title","price","href","Component","http","App","loadData","self","data","setState","products","console","log","productList","state","map","product","key","_id","bind","logo","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,kC,sOCqB5BC,G,kDAlBXC,YAAc,WAUV,OATc,IAAIC,SAAQ,SAACC,EAASC,GAChCC,MAAM,iCACLC,MAAK,SAAAC,GACFJ,EAAQI,EAASC,WAClBC,OAAM,SAAAC,GACLN,EAAOM,YCSRC,G,uLAbP,OACI,yBAAKC,UAAU,gBACX,yBAAKA,UAAU,eAAeC,IAAKC,KAAKC,MAAMC,OAAQC,IAAI,YAC1D,yBAAKL,UAAU,cACX,wBAAIA,UAAU,cAAcE,KAAKC,MAAMG,OACvC,uBAAGN,UAAU,aAAb,WAAkCE,KAAKC,MAAMI,OAC7C,uBAAGC,KAAK,4BAA4BR,UAAU,mBAA9C,yB,GARES,cCGhBC,EAAO,IAAItB,EAsDFuB,E,YAlDb,WAAYR,GAAQ,IAAD,8BACf,4CAAMA,KAWVS,SAAW,WACT,IAAIC,EAAI,eACRH,EAAKrB,cAAcK,MAAK,SAAAoB,GAEtBD,EAAKE,SAAS,CAAEC,SAAUF,OACzB,SAAAhB,GACDmB,QAAQC,IAAI,sCAAuCpB,OAlBpC,EAuBnBqB,YAAc,WAOZ,OANa,EAAKC,MAAMJ,SAASK,KAAI,SAACC,GAAD,OACnC,yBAAKtB,UAAU,WAAWuB,IAAKD,EAAQE,KACrC,kBAAC,EAAD,CAASlB,MAAOgB,EAAQhB,MAAOC,MAAOe,EAAQf,MAAOH,OAAQkB,EAAQlB,cAvBvE,EAAKgB,MAAQ,CACXJ,SAAU,IAGZ,EAAKJ,SAAW,EAAKA,SAASa,KAAd,gBAChB,EAAKN,YAAc,EAAKA,YAAYM,KAAjB,gBACnB,EAAKb,WATU,E,sEAkCnB,OACE,yBAAKZ,UAAU,OACb,yBAAKA,UAAU,cACb,yBAAKC,IAAKyB,IAAM1B,UAAU,WAAWK,IAAI,SACzC,iDAEF,yBAAKL,UAAU,sBACb,yBAAKA,UAAU,OACZE,KAAKiB,qB,GA5CEV,aCIEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5C,MAAK,SAAA6C,GACJA,EAAaC,gBAEd3C,OAAM,SAAA4C,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.85abc07a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import 'whatwg-fetch';\r\n\r\nclass HttpService {\r\n    getProducts = () => {\r\n        var promise = new Promise((resolve, reject) => {\r\n            fetch('http://localhost:3004/product')\r\n            .then(response => {\r\n                resolve(response.json());                \r\n            }).catch(err => {\r\n                reject(err);\r\n            })\r\n        });\r\n\r\n        return promise;\r\n    }\r\n\r\n    // var getProducts = function() {\r\n\r\n    // }\r\n}\r\n\r\nexport default HttpService;","import React, { Component } from 'react';\r\nimport './product.css';\r\n\r\nclass Product extends Component {\r\n    render () {\r\n        return (\r\n            <div className=\"card product\">\r\n                <img className=\"card-img-top\" src={this.props.imgUrl} alt=\"Product\"></img>\r\n                <div className=\"card-block\">\r\n                    <h4 className=\"card-title\">{this.props.title}</h4>\r\n                    <p className=\"card-text\">Price: ${this.props.price}</p>\r\n                    <a href=\"https://www.w3schools.com\" className=\"btn btn-primary\">Add to Wishlist</a>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Product;","import React, { Component } from '../../node_modules/react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport HttpService from '../services/http-service';\r\nimport Product from '../product/product';\r\n\r\nconst http = new HttpService();\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n      super(props);\r\n\r\n      this.state = {\r\n        products: []\r\n      };\r\n\r\n      this.loadData = this.loadData.bind(this);\r\n      this.productList = this.productList.bind(this);\r\n      this.loadData();\r\n  }\r\n\r\n  loadData = () => {\r\n    let self = this;\r\n    http.getProducts().then(data => {\r\n      //console.log(products);\r\n      self.setState({ products: data});\r\n    }, err => {\r\n      console.log(\"There's an error getting products: \", err);\r\n\r\n    });\r\n  }\r\n\r\n  productList = () => {\r\n    const list = this.state.products.map((product) => \r\n      <div className=\"col-sm-4\" key={product._id}>\r\n        <Product title={product.title} price={product.price} imgUrl={product.imgUrl}/>\r\n      </div>\r\n    );\r\n\r\n    return (list);\r\n  }\r\n\r\n  render() {\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <h2>Welcome to React</h2>\r\n      </div>\r\n      <div className=\"comtainer App-main\">\r\n        <div className=\"row\">\r\n          {this.productList()}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n  };\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}